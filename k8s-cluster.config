{
    'benchmarker': {
        'resultfolder': '/home/myself/benchmarks',
        'jarfolder': './jars/'
    },
    'credentials': {
        'k8s': {
            'appname': 'bexhoma',
            'context': {
                'dummy': {
                    'namespace': 'dummy',
                    'clustername': 'Dummy',
                    'service_sut': '{service}.{namespace}.svc.cluster.local',
                    'port': 9091, # K8s: Local port for connecting via JDBC after port forwarding
                },
            },
            'monitor': {
                'service_monitoring': 'http://{service}.{namespace}.svc.cluster.local:9090/api/v1/',
                'extend': 20,
                'shift': 0,
                'metrics': {
                    'total_cpu_memory': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'gauge',
                        'query': '(sum(max(container_memory_working_set_bytes{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}}) by (instance)))/1024/1024',
                        'title': 'Memory Usage [MiB]'
                    },
                    'total_cpu_memory_cached': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'gauge',
                        'query': '(sum(max(container_memory_usage_bytes{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}}) by (instance)))/1024/1024',
                        'title': 'Memory Usage Cached [MiB]'
                    },
                    'total_cpu_util': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(irate(container_cpu_usage_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}}[5m]))',
                        'title': 'CPU Utilization [%]'
                    },
                    'total_cpu_throttled': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(irate(container_cpu_cfs_throttled_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}}[5m]))',
                        'title': 'CPU Throttle [%]'
                    },
                    'total_cpu_throttled_s': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(container_cpu_cfs_throttled_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}})',
                        'title': 'CPU Throttled Time [s]'
                    },
                    'total_cpu_util_others': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'sum(irate(container_cpu_usage_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container!="dbms",id!="/"}}[5m]))',
                        'title': 'CPU Utilization Others [%]'
                    },
                    'total_cpu_util_s': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(container_cpu_usage_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}})',
                        'title': 'CPU Utilization Time [s]'
                    },
                    'total_cpu_util_user_s': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(container_cpu_user_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}})',
                        'title': 'CPU User Time [s]'
                    },
                    'total_cpu_util_sys_s': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(container_cpu_system_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container="dbms"}})',
                        'title': 'CPU System Time [s]'
                    },
                    'total_cpu_util_others_s': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(container_cpu_usage_seconds_total{{pod=~"(.*){configuration}-{experiment}(.*)", pod=~"(.*){configuration}-{experiment}(.*)", container!="dbms",id!="/"}})',
                        'title': 'CPU Utilization Time Others [s]'
                    },
                    'total_network_rx': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(container_network_receive_bytes_total{{container_label_app="bexhoma", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)"}})/1024/1024',
                        'title': 'Network Rx Total [MiB]'
                    },
                    'total_network_tx': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(container_network_transmit_bytes_total{{container_label_app="bexhoma", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)"}})/1024/1024',
                        'title': 'Network Tx Total [MiB]'
                    },
                    'total_fs_read': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(container_fs_reads_bytes_total{{container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_container_name="dbms"}})/1024/1024',
                        'title': 'Filesystem Read Total [MiB]'
                    },
                    'total_fs_write': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(container_fs_writes_bytes_total{{container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_pod_name=~"(.*){configuration}-{experiment}(.*)", container_label_io_kubernetes_container_name="dbms"}})/1024/1024',
                        'title': 'Filesystem Write Total [MiB]'
                    },
                    'total_gpu_util': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'sum(DCGM_FI_DEV_GPU_UTIL{{UUID=~"{gpuid}"}})',
                        'title': 'GPU Utilization [%]'
                    },
                    'total_gpu_power': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'sum(DCGM_FI_DEV_POWER_USAGE{{UUID=~"{gpuid}"}})',
                        'title': 'GPU Power Usage [W]'
                    },
                    'total_gpu_memory': {
                        'type': 'cluster',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'sum(DCGM_FI_DEV_FB_USED{{UUID=~"{gpuid}"}})',
                        'title': 'GPU Memory Usage [MiB]'
                    },
                    'core_variance': {
                        'type': 'cluster',
                        'active': True,
                        'metric': 'gauge',
                        'query': '100 * avg((sum by (exported_cpu) (rate(node_cpu_seconds_total{{mode!="idle", instance="{host}"}}[5m])))^2)-(avg(sum by (exported_cpu) (rate(node_cpu_seconds_total{{mode!="idle", instance="{host}"}}[5m]))))^2',
                        'title': 'Core Utilization Variance [%]'
                    },
                },
            },
        },
    },
    'volumes': {
        'tpcc': {
            'id': '1',
            'initscripts': {
                'Schema': [
                    'initschema-tpcc.sql',
                ],
                'Checks': [
                    'checkschema-tpcc.sql',
                ],
                'Schema_tenant': [
                    'initschema-tpcc-schema.sql',
                ],
                'Checks_tenant': [
                    'checkschema-ycsb-schema.sql',
                ],
            }
        },
        'ycsb': {
            'id': '1',
            'initscripts': {
                'Schema': [
                    'initschema-ycsb.sql',
                ],
                'Checks': [
                    'checkschema-ycsb.sql',
                ],
            }
        },
        'benchbase': {
            'id': '1',
            'initscripts': {
                'Empty': [
                ],
                'Schema': [
                    'initschema-benchbase.sql',
                ],
                'Checks': [
                    'checkschema-benchbase.sql',
                ],
                'Schema_tenant': [
                    'initschema-benchbase-schema.sql',
                ],
                'Checks_tenant': [
                    'checkschema-benchbase-schema.sql',
                ],
            }
        },
        'example': {
            'id': '0',
            'initscripts': {
                'empty': [
                ],
            }
        },
        'osm': {
            'id': '0',
            'initscripts': {
                'berlin': [
                    'initschema-osm.sql',
                    'initdata-osm-berlin.sql',
                    'initindexes-osm.sql',
                ],
            }
        },
        'tpcds': {
            'id': '1',
            'initscripts': {
                'Schema': [
                    'initschema-tpcds.sql',
                ],
                'Schema_dummy': [
                    'initschemadummy-tpcds.sql',
                ],
                'Index': [
                    'initindexes-tpcds.sql',
                ],
                'Index_and_Constraints': [
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                ],
                'Index_and_Constraints_and_Statistics': [
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                    'initstatistics-tpcds.sql',
                ],
                'SF1': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF1.sql',
                    'initdata-tpcds-SF1.sh'
                ],
                'SF1-template': [
                    'initschema-tpcds-template.sql',
                    'initdata-tpcds-SF1.sql',
                    'initdata-tpcds-SF1.sh'
                ],
                'SF1-index': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF1.sql',
                    'initdata-tpcds-SF1.sh',
                    'initindexes-tpcds.sql',
                ],
                'SF1-index-constraints': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF1.sql',
                    'initdata-tpcds-SF1.sh',
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                ],
                'SF10': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF10.sql',
                    'initdata-tpcds-SF10.sh'
                ],
                'SF10-template': [
                    'initschema-tpcds-template.sql',
                    'initdata-tpcds-SF10.sql',
                    'initdata-tpcds-SF10.sh'
                ],
                'SF10-index': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF10.sql',
                    'initdata-tpcds-SF10.sh',
                    'initindexes-tpcds.sql',
                ],
                'SF10-index-constraints': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF10.sql',
                    'initdata-tpcds-SF10.sh',
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                ],
                'SF30': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF30.sql',
                    'initdata-tpcds-SF30.sh'
                ],
                'SF30-index': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF30.sql',
                    'initdata-tpcds-SF30.sh',
                    'initindexes-tpcds.sql',
                ],
                'SF30-index-constraints': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF30.sql',
                    'initdata-tpcds-SF30.sh',
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                ],
                'SF100': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF100.sql',
                    'initdata-tpcds-SF100.sh'
                ],
                'SF100-template': [
                    'initschema-tpcds-template.sql',
                    'initdata-tpcds-SF100.sql',
                    'initdata-tpcds-SF100.sh'
                ],
                'SF100-index': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF100.sql',
                    'initdata-tpcds-SF100.sh',
                    'initindexes-tpcds.sql',
                ],
                'SF100-index-constraints': [
                    'initschema-tpcds.sql',
                    'initdata-tpcds-SF100.sql',
                    'initdata-tpcds-SF100.sh',
                    'initindexes-tpcds.sql',
                    'initconstraints-tpcds.sql',
                ],
            }
        },
        'tpch': {
            'id': '2',
            'initscripts': {
                'Schema': [
                    'initschema-tpch.sql',
                ],
                'Schema-Columnar': [
                    'initschemacolumnar-tpch.sql',
                ],
                'Schema_dummy': [
                    'initschemadummy-tpch.sql',
                ],
                'Index': [
                    'initindexes-tpch.sql',
                ],
                'Statistics': [
                    'initstatistics-tpch.sql',
                ],
                'Index_and_Statistics': [
                    'initindexes-tpch.sql',
                    'initstatistics-tpch.sql',
                ],
                'Index_and_Constraints': [
                    'initindexes-tpch.sql',
                    'initconstraints-tpch.sql',
                ],
                'Index_and_Constraints_and_Statistics': [
                    'initindexes-tpch.sql',
                    'initconstraints-tpch.sql',
                    'initstatistics-tpch.sql',
                ],
                'Schema_tenant': [
                    'initschema-tpch-schema.sql',
                ],
                'Index_and_Constraints_and_Statistics_tenant': [
                    'initindexes-tpch-schema.sql',
                    'initconstraints-tpch-schema.sql',
                    'initstatistics-tpch-schema.sql',
                ],
                'SF1': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF1.sql',
                    'initdata-tpch-SF1.sh'
                ],
                'SF1-index': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF1.sql',
                    'initdata-tpch-SF1.sh',
                    'initindexes-tpch.sql',
                ],
                'SF10': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF10.sql',
                    'initdata-tpch-SF10.sh'
                ],
                'SF10-index': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF10.sql',
                    'initdata-tpch-SF10.sh',
                    'initindexes-tpch.sql',
                ],
                'S30': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF30.sql',
                    'initdata-tpch-SF30.sh'
                ],
                'SF30-index': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF30.sql',
                    'initdata-tpch-SF30.sh',
                    'initindexes-tpch.sql',
                ],
                'SF100': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF100.sql',
                    'initdata-tpch-SF100.sh'
                ],
                'SF100-index': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF100.sql',
                    'initdata-tpch-SF100.sh',
                    'initindexes-tpch.sql',
                ],
                'SF300': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF300.sql',
                    'initdata-tpch-SF300.sh'
                ],
                'SF300-index': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF300.sql',
                    'initdata-tpch-SF300.sh',
                    'initindexes-tpch.sql',
                ],
                'SF1-index-constraints': [
                    'initschema-tpch.sql',
                    'initdata-tpch-SF1.sql',
                    'initdata-tpch-SF1.sh',
                    'initindexes-tpch.sql',
                    'initconstraints-tpch.sql',
                ],
                'SF1-template': [
                    'initschema-tpch-template.sql',
                    'initdata-tpch-SF1.sql',
                    'initdata-tpch-SF1.sh'
                ],
                'SF10-template': [
                    'initschema-tpch-template.sql',
                    'initdata-tpch-SF10.sql',
                    'initdata-tpch-SF10.sh'
                ],
                'SF30-template': [
                    'initschema-tpch-template.sql',
                    'initdata-tpch-SF30.sql',
                    'initdata-tpch-SF30.sh'
                ],
                'SF100-template': [
                    'initschema-tpch-template.sql',
                    'initdata-tpch-SF100.sql',
                    'initdata-tpch-SF100.sh'
                ],
            }
        }
    },
    'instances': {},
    'dockers': {
        'PostgreSQL': {
            'loadData': 'psql -U postgres -d {database} < {scriptname}',
            'delay_prepare': 0,
            'template': {
                'version': 'v11.4',
                'alias': 'General-B',
                'docker_alias': 'GP-B',
                 'JDBC': {
                    'driver': "org.postgresql.Driver",
                    'auth': ["postgres", ""],
                    'url': 'jdbc:postgresql://{serverip}:9091/{database}?reWriteBatchedInserts=true&currentSchema={schema}',
                    'jar': 'postgresql-42.5.0.jar',
                    'database': 'postgres',
                    'schema': 'public',
                }
            },
            'logfile': '/usr/local/data/logfile',
            'datadir': '/var/lib/postgresql/data/',
            'priceperhourdollar': 0.0,
            'monitor': {
                'blackbox': True,
                'metrics': {
                    'pg_stat_database_blks_read': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_database_blks_read{{datname!~"template.*"}})',
                        'query2': 'sum(pg_stat_database_blks_read{{schemaname="{schema}", datname="{database}"}})',
                        'query3': 'sum(sum by(datname) (pg_stat_database_blks_read{{datname!~"template.*"}})) / count(sum by(datname) (pg_stat_database_blks_read{{datname!~"template.*"}}))',
                        'title': 'Disk Blocks Read Count'
                    },
                    'pg_stat_database_blks_hit': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_database_blks_hit{{datname!~"template.*"}})',
                        'query2': 'sum(pg_stat_database_blks_hit{{schemaname="{schema}", datname="{database}"}})',
                        'query3': 'sum(sum by(datname) (pg_stat_database_blks_hit{{datname!~"template.*"}})) / count(sum by(datname) (pg_stat_database_blks_hit{{datname!~"template.*"}}))',
                        'title': 'Buffer Cache Hit Count'
                    },
                    'cache_hit_ratio': {
                        'type': 'application',
                        'active': True,
                        'metric': 'ratio',
                        'query': 'sum(pg_stat_database_blks_hit{{datname!~"template.*"}})/(sum(pg_stat_database_blks_hit{{datname!~"template.*"}}) + sum(pg_stat_database_blks_read{{datname!~"template.*"}}))',
                        'query2': 'sum(pg_stat_database_blks_hit{{schemaname="{schema}", datname="{database}"}})/(sum(pg_stat_database_blks_hit{{schemaname="{schema}", datname="{database}"}}) + sum(pg_stat_database_blks_read{{schemaname="{schema}", datname="{database}"}}))',
                        'title': 'Buffer Cache Hit Ratio'
                    },
                    'pg_statio_user_tables_heap_blocks_hit': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_statio_user_tables_heap_blocks_hit)',
                        'query2': 'sum(pg_statio_user_tables_heap_blocks_hit{{schemaname="{schema}", datname="{database}"}})',
                        'title': 'Table Buffer Hit Count'
                    },
                    'pg_statio_user_tables_heap_blocks_read': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_statio_user_tables_heap_blocks_read)',
                        'query2': 'sum(pg_statio_user_tables_heap_blocks_read{{schemaname="{schema}", datname="{database}"}})',
                        'title': 'Table Blocks Read Count'
                    },
                    'pg_stat_bgwriter_checkpoint_sync_time_total': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_bgwriter_checkpoint_sync_time_total)',
                        'title': 'Checkpoint Sync Time [ms]'
                    },
                    'pg_stat_bgwriter_checkpoint_write_time_total': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_bgwriter_checkpoint_write_time_total)',
                        'title': 'Checkpoint Write Time [ms]'
                    },
                    'pg_stat_bgwriter_checkpoint_write_time_per_sync_time': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(rate(pg_stat_bgwriter_checkpoint_write_time_total[5m])) / sum(rate(pg_stat_bgwriter_checkpoint_sync_time_total[5m]))',
                        'title': 'Checkpoint Write-to-Sync Ratio',
                    },
                    'pg_locks_count': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count)',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'Total Locks Current'
                    },
                    'pg_locks_count_accessexclusivelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="accessexclusivelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'AccessExclusiveLocks Current'
                    },
                    'pg_locks_count_accesssharelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="accesssharelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'AccessShareLocks Current'
                    },
                    'pg_locks_count_exclusivelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="exclusivelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'ExclusiveLocks Current'
                    },
                    'pg_locks_count_rowexclusivelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="rowexclusivelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'RowExclusiveLocks Current'
                    },
                    'pg_locks_count_rowsharelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="rowsharelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'RowShareLocks Current'
                    },
                    'pg_locks_count_sharelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="sharelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'ShareLocks Current'
                    },
                    'pg_locks_count_sharerowexclusivelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="sharerowexclusivelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'ShareRowExclusiveLocks Current'
                    },
                    'pg_locks_count_shareupdateexclusivelock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="shareupdateexclusivelock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'ShareUpdateExclusiveLocks Current'
                    },
                    'pg_locks_count_sireadlock': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_locks_count{{mode="sireadlock"}})',
                        'query2': 'sum(pg_locks_count{{datname="{database}"}})',
                        'title': 'SIReadLocks Current'
                    },
                    'pg_stat_user_tables_autoanalyze_count': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_user_tables_autoanalyze_count)',
                        'query2': 'sum(pg_stat_user_tables_autoanalyze_count{{datname="{database}"}})',
                        'title': 'Autoanalyze Run Count'
                    },
                    'pg_stat_user_tables_autovacuum_count': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_user_tables_autovacuum_count)',
                        'query2': 'sum(pg_stat_user_tables_autovacuum_count{{datname="{database}"}})',
                        'title': 'Autovacuum Run Count'
                    },
                    'pg_stat_activity_count_idle': { # not clear
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle"}})',
                        'query2': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle", datname="{database}"}})',
                        'title': 'Number of Idle Sessions',
                    },
                    'pg_stat_activity_count_idle_transaction': { # not clear
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle in transaction"}})',
                        'query2': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle in transaction", datname="{database}"}})',
                        'title': 'Number of Idle-in-transaction Sessions',
                    },
                    'pg_stat_activity_count_idle_transaction_aborted': { # not clear
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle in transaction (aborted)"}})',
                        'query2': 'sum(pg_stat_activity_count{{datname!~"template.*", state="idle in transaction (aborted)", datname="{database}"}})',
                        'title': 'Number of Idle-in-transaction Aborted Sessions',
                    },
                    'pg_stat_activity_count_active': { # not clear
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'sum(pg_stat_activity_count{{datname!~"template.*", state="active"}})',
                        'query2': 'sum(pg_stat_activity_count{{datname!~"template.*", state="active", datname="{database}"}})',
                        'title': 'Number of Active Sessions',
                    },
                    'pg_stat_activity_max_tx_duration_active': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_max_tx_duration{{datname!~"template.*", state="active"}})',
                        'title': 'Longest Active Transaction',
                    },
                    'pg_stat_activity_max_tx_duration_idle': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_max_tx_duration{{datname!~"template.*", state="idle"}})',
                        'title': 'Longest Idle Session (no transaction)',
                    },
                    'pg_stat_activity_max_tx_duration_idle_in_tx': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_max_tx_duration{{datname!~"template.*", state="idle in transaction"}})',
                        'title': 'Longest Idle-in-Transaction',
                    },
                    'pg_stat_activity_max_tx_duration_idle_in_tx_aborted': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_stat_activity_max_tx_duration{{datname!~"template.*", state="idle in transaction (aborted)"}})',
                        'title': 'Longest Idle-in-Transaction (Aborted)',
                    },
                    'pg_stat_bgwriter_checkpoints_timed_per_req': {
                        'type': 'application',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'sum(rate(pg_stat_bgwriter_checkpoints_timed[5m])) / sum(rate(pg_stat_bgwriter_checkpoints_req[5m]))',
                        'title': 'Frequency of checkpoints (timed vs requested) [ratio]',
                    },
                    'pg_stat_bgwriter_checkpoint_write_time_per_sync_time': {
                        'type': 'application',
                        'active': False,
                        'metric': 'ratio',
                        'query': 'sum(rate(pg_stat_bgwriter_checkpoint_write_time[5m])) / sum(rate(pg_stat_bgwriter_checkpoint_sync_time[5m]))',
                        'title': 'Time spent writing vs syncing during checkpoints [ratio]',
                    },
                    'pg_stat_wal_volume_bytes_sec': {
                        'type': 'application',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(rate(pg_stat_wal_wal_bytes[5m]))',
                        'title': 'Volume of WAL generated [bytes/sec]',
                    },
                    'pg_stat_bgwriter_buffers_backend_fsync': {
                        'type': 'application',
                        'active': False,
                        'metric': 'counter',
                        'query': 'sum(rate(pg_stat_bgwriter_buffers_backend_fsync[5m]))',
                        'title': 'Backends forced to flush WAL (I/O contention) [fsync/sec]',
                    },
                    'pg_stat_activity_wait_event_count': {
                        'type': 'application',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'count(pg_stat_activity_wait_event)',
                        'title': 'Active sessions waiting on any event [count]',
                    },
                    'pg_stat_user_tables_dead_tuples_per_vacuum': {
                        'type': 'application',
                        'active': True,
                        'metric': 'ratio',
                        'query': 'sum(pg_stat_user_tables_n_dead_tup) / sum(rate(pg_stat_user_tables_vacuum_count[5m]))',
                        'title': 'Dead tuples per vacuum operation [tuples/vacuum]',
                    },
                    'pg_wal_segments': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_wal_segments)',
                        'title': 'Number of WAL Segments'
                    },
                    'pg_wal_size_bytes': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'sum(pg_wal_size_bytes) / 1024 / 1024 / 1024',
                        'title': 'Total WAL Size [GiB]'
                    },
                    'pg_wal_segments_rate': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'rate(pg_wal_segments[2m])',
                        'title': 'WAL Segments Growth Rate [segments/s]'
                    },
                    'pg_wal_size_rate': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'rate(pg_wal_size_bytes[2m]) / 1024 / 1024',
                        'title': 'WAL Growth Rate [MiB/s]'
                    },
                    'pg_wal_avg_segment_size': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'pg_wal_size_bytes / pg_wal_segments / 1024 / 1024',
                        'title': 'Average WAL Segment Size [MiB]'
                    },
                    # WAL size per checkpoint (requires checkpoint info, useful for bottlenecks)
                    'pg_wal_size_per_checkpoint': {
                        'type': 'application',
                        'active': False,
                        'metric': 'gauge',
                        'query': 'pg_wal_size_bytes / (sum(pg_stat_bgwriter_checkpoints_timed) + sum(pg_stat_bgwriter_checkpoints_req))',
                        'title': 'WAL Size per Checkpoint [bytes/checkpoint]'
                    },
                },
            },
        },
        'MySQL': {
            'loadData': 'mysql --local-infile < {scriptname}',
            'delay_prepare': 0,
            'template': {
                'version': 'CE 8.0.36',
                'alias': 'General-C',
                'docker_alias': 'GP-C',
                'dialect': 'MySQL',
                'JDBC': {
                    'driver': "com.mysql.cj.jdbc.Driver",
                    'auth': ["root", "root"],
                    'url': 'jdbc:mysql://{serverip}:9091/{dbname}?rewriteBatchedStatements=true',
                    'jar': ['mysql-connector-j-8.0.31.jar', 'slf4j-simple-1.7.21.jar'],
                    'database': 'mysql', # does not exist, must be overwritten
                }
            },
            'logfile': '/var/log/mysqld.log',
            'datadir': '/var/lib/mysql/',
            'priceperhourdollar': 0.0,
            'monitor': {
                'blackbox': False,
                'metrics': {
                    'mysql_buffer_pool_hit_ratio': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': '(rate(mysql_global_status_innodb_buffer_pool_reads[5m]) == 0) or (1 - (rate(mysql_global_status_innodb_buffer_pool_reads[5m]) / rate(mysql_global_status_innodb_buffer_pool_read_requests[5m])))',
                        'title': 'InnoDB Buffer Pool Hit Ratio'
                    },
                    'mysql_queries_per_second': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'rate(mysql_global_status_queries[5m])',
                        'title': 'Queries Per Second (QPS)'
                    },
                    'mysql_connections_usage': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'mysql_global_status_threads_connected / mysql_global_variables_max_connections',
                        'title': 'Connection Usage Ratio'
                    },
                    'mysql_slow_queries': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'rate(mysql_global_status_slow_queries[5m])',
                        'title': 'Slow Queries Rate'
                    },
                    'mysql_innodb_log_waits': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'rate(mysql_global_status_innodb_log_waits[5m])',
                        'title': 'InnoDB Log Waits Rate'
                    },
                    'mysql_threads_running': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'mysql_global_status_threads_running',
                        'title': 'Threads Running'
                    },
                    'mysql_handler_rollback_rate': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'rate(mysql_global_status_handler_rollback[5m])',
                        'title': 'Rollback Operations Rate'
                    },
                    'mysql_table_locks_waited': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'rate(mysql_global_status_table_locks_waited[5m])',
                        'title': 'Table Lock Waits Rate'
                    },
                    'mysql_tmp_disk_tables': {
                        'type': 'application',
                        'active': True,
                        'metric': 'counter',
                        'query': 'rate(mysql_global_status_created_tmp_disk_tables[5m])',
                        'title': 'Temporary Disk Tables Rate'
                    },
                    'mysql_open_files_ratio': {
                        'type': 'application',
                        'active': True,
                        'metric': 'gauge',
                        'query': 'mysql_global_status_open_files / mysql_global_variables_open_files_limit',
                        'title': 'Open Files Usage Ratio'
                    }
                },
            },
        },
        'MariaDB': {
            'loadData': 'mariadb < {scriptname}',
            'delay_prepare': 0,
            'template': {
                'version': 'v10.4.6',
                'alias': 'General-A',
                'docker_alias': 'GP-A',
                 'dialect': 'MySQL',
                 'JDBC': {
                    'driver': "org.mariadb.jdbc.Driver",
                    'auth': ["root", ""],
                    'url': 'jdbc:mariadb://{serverip}:9091/{dbname}?rewriteBatchedStatements=true',
                    'jar': 'mariadb-java-client-3.1.0.jar',
                    'database': 'mysql', # does not exist, must be overwritten
                }
            },
            'logfile': '/usr/local/data/logfile',
            'datadir': '/var/lib/mysql/',
            'priceperhourdollar': 0.0,
        },
        'MonetDB': {
            'loadData': 'cd /home/monetdb;echo "user=monetdb\npassword=monetdb" > .monetdb;mclient demo < {scriptname}',
            'template': {
                'version': '11.37.11',
                'alias': 'Columnwise',
                'docker_alias': 'Columnwise',
                 'JDBC': {
                    'auth': ['monetdb', 'monetdb'],
                    'driver': 'org.monetdb.jdbc.MonetDriver',
                    'jar': 'monetdb-jdbc-12.0.jre8.jar',
                    'url': 'jdbc:monetdb://{serverip}:9091/demo?so_timeout=0'#?autocommit=true&so_timeout=0',
                    'database': 'demo',
                }
            },
            'logfile': '/var/monetdb5/dbfarm/merovingian.log',
            'datadir': '/var/monetdb5/',
            'priceperhourdollar': 0.0,
        },
        'YugabyteDB': {
            'loadData': 'psql -U yugabyte --host yb-tserver-service.{namespace}.svc.cluster.local --port 5433 < {scriptname}',
            'template': {
                'version': 'v2.17.1',
                'alias': 'Cloud-Native-1',
                'docker_alias': 'CN1',
                 'JDBC': {
                    'driver': "com.yugabyte.Driver",
                    'auth': ["yugabyte", ""],
                    'url': 'jdbc:yugabytedb://yb-tserver-service.{namespace}.svc.cluster.local:5433/yugabyte?load-balance=true',
                    'jar': 'jdbc-yugabytedb-42.3.5-yb-2.jar',
                    'database': 'yugabyte',
                }
            },
            'logfile': '/usr/local/data/logfile',
            'datadir': '/var/lib/postgresql/data/',
            'priceperhourdollar': 0.0,
        },
        'CockroachDB': {
            'loadData': 'cockroach sql --host {service_name} --port 9091 --insecure --file {scriptname}',
            'delay_prepare': 120,
            'attachWorker': "",
            'template': {
                'version': 'v24.2.4',
                'alias': 'Cloud-Native-2',
                'docker_alias': 'CN2',
                 'JDBC': {
                    'driver': "org.postgresql.Driver",
                    'auth': ["root", ""],
                    'url': 'jdbc:postgresql://{serverip}:9091/defaultdb?reWriteBatchedInserts=true&sslmode=disable',
                    'jar': 'postgresql-42.5.0.jar',
                    'database': 'defaultdb',
                }
            },
            'logfile': '/usr/local/data/logfile',
            'datadir': '/cockroach/cockroach-data',
            'priceperhourdollar': 0.0,
        },
        'Redis': {
            'loadData': 'redis-cli --host bexhoma-service.{namespace}.svc.cluster.local < {scriptname}',
            'delay_prepare': 0,
            'attachWorker': '',
            'template': {
                'version': 'xxx',
                'alias': 'Key-Value-1',
                'docker_alias': 'KV1',
                'auth': ["root", ""],
            },
            'logfile': '/var/log/redis/redis-server.log',
            'datadir': '/data',
            'priceperhourdollar': 0.0,
        },
        'Citus': {
            'loadData': 'psql -U postgres < {scriptname}',
            'attachWorker': "psql -U postgres --command=\"SELECT * from master_add_node('{worker}.{service_sut}', 5432);\"",
            'template': {
                'version': '10.0.2',
                'alias': 'General-B',
                'docker_alias': 'GP-B',
                 'JDBC': {
                    'driver': "org.postgresql.Driver",
                    'auth': ["postgres", "password1234"],
                    'url': 'jdbc:postgresql://{serverip}:9091/postgres?loadBalanceHosts=true',#/{dbname}',
                    'jar': 'postgresql-42.5.0.jar',
                    'database': 'postgres',
                }
            },
            'logfile': '/usr/local/data/logfile',
            'datadir': '/var/lib/postgresql/data/',
            'priceperhourdollar': 0.0,
        },
    },
}
