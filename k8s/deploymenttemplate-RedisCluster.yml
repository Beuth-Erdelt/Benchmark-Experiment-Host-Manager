apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels: {app: bexhoma, component: sut, configuration: default, experiment: default}
  name: bexhoma-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: shared
---
apiVersion: v1
kind: Service
metadata:
  labels: {app: bexhoma, component: sut, configuration: default, experiment: default}
  name: bexhoma-service
spec:
  ports:
  - {port: 9091, protocol: TCP, name: port-dbms, targetPort: 6379}
  - {port: 9300, protocol: TCP, name: port-monitoring, targetPort: 9300}
  selector: {app: bexhoma, component: sut, configuration: default, experiment: default}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {app: bexhoma, component: sut, configuration: default, experiment: default}
  name: bexhoma-deployment-redis
spec:
  replicas: 1
  selector:
    matchLabels: {app: bexhoma, component: sut, configuration: default, experiment: default}
  template:
    metadata:
      labels: {app: bexhoma, component: sut, configuration: default, experiment: default}
    spec:
      automountServiceAccountToken: false
      imagePullSecrets:
      - {name: dockerhub}
      nodeSelector:
      tolerations:
      #- key: "nvidia.com/gpu"
      #  effect: "NoSchedule"
      terminationGracePeriodSeconds: 180
      containers:
      - name: dbms
        image: redis:7.4.2
        args: ["--maxclients", "10000", "--io-threads", "64"]
        env:
          - name: MASTER
            value: "true"
        ports:
          - containerPort: 6379
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli ping | grep PONG"
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          #runAsNonRoot: true
          #runAsUser: 1000
          #runAsGroup: 1000
          #capabilities:
          #  drop:
          #    - ALL
          readOnlyRootFilesystem: false
        resources:
          limits: {cpu: 16000m, memory: 128Gi}
          requests: {cpu: 1000m, memory: 1Gi}
          #, ephemeral-storage: "1536Gi"}
        volumeMounts:
        #- {mountPath: /data, name: benchmark-data-volume}
        - {mountPath: /data, name: benchmark-storage-volume}
      - name: cadvisor
        image: gcr.io/cadvisor/cadvisor:v0.47.0
        args: ["--port", "9300", "--storage_duration", "20m0s", "--docker_only", "true", "--disable_metrics", "disk,network,tcp,advtcp,udp,sched,process,hugetlb", "--application_metrics_count_limit", "30", "--housekeeping_interval", "5s"]
        ports:
        - containerPort: 9300
          #hostPort: 9300
          name: http
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          #runAsNonRoot: true
          #runAsUser: 1000
          #runAsGroup: 1000
          #capabilities:
          #  drop:
          #    - ALL
          readOnlyRootFilesystem: true
        resources:
          requests: {cpu: 150m, memory: 200Mi}
          limits: {cpu: 16000m, memory: 128Gi}
        volumeMounts:
        - name: rootfs
          mountPath: /rootfs
          readOnly: true
        - name: var-run
          mountPath: /var/run
          readOnly: true
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: docker
          mountPath: /var/lib/docker
          readOnly: true
        - name: disk
          mountPath: /dev/disk
          readOnly: true
      volumes:
      - name: benchmark-data-volume
        persistentVolumeClaim: {claimName: bexhoma-data}
      - name: benchmark-storage-volume
        persistentVolumeClaim: {claimName: bexhoma-storage}
      - name: rootfs
        hostPath:
          path: /
      - name: var-run
        hostPath:
          path: /var/run
      - name: sys
        hostPath:
          path: /sys
      - name: docker
        hostPath:
          path: /var/lib/docker
      - name: disk
        hostPath:
          path: /dev/disk
      - name: dshm
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: bexhoma-workers
  labels:
    app: bexhoma-workers
spec:
  selector:
    app: bexhoma-workers
  clusterIP: None
  ports:
  - port: 6379
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bexhoma-worker
spec:
  selector:
    matchLabels:
      app: bexhoma-workers
  serviceName: bexhoma-workers
  replicas: 3
  template:
    metadata:
      labels:
        app: citus-workers
    spec:
      nodeSelector:
      tolerations:
      - key: "nvidia.com/gpu"
        effect: "NoSchedule"
      containers:
      - name: bexhoma-worker
        image: redis:7.4.2
          command:
            - "redis-server"
            - "--cluster-enabled"
            - "yes"
            - "--cluster-config-file"
            - "/data/nodes.conf"
            - "--cluster-node-timeout"
            - "5000"
            - "--appendonly"
            - "yes"
            - "--protected-mode"
            - "no"
            - "--cluster-announce-ip"
            - "$(POD_IP)"
          ports:
            - containerPort: 6379
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: bexhoma-workers
      labels: {app: bexhoma, component: worker, configuration: default, experiment: default}
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 100Gi
      storageClassName: shared
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cluster-init
  labels: {app: bexhoma, component: worker, configuration: default, experiment: default}
spec:
  template:
    metadata:
      labels: {app: bexhoma, component: worker, configuration: default, experiment: default}
    spec:
      containers:
      - name: cluster-init
        image: redis:7.0
        imagePullPolicy: IfNotPresent
        env:
        - name: BEXHOMA_WORKER_LIST_SPACE
          value: redis-0.redis redis-1.redis redis-2.redis
        env:
        - name: BEXHOMA_WORKER_FIRST
          value: redis-0.redis
        command: [ "sh", "-c" ]
        args:
          - |
            echo "Waiting for Redis pods..."
            until nslookup $(expr $BEXHOMA_WORKER_FIRST); do sleep 2; done
            echo "All pods are ready (?). Creating Redis cluster..."
            redis-cli --cluster create $(expr $BEXHOMA_WORKER_LIST) --cluster-replicas 0 --cluster-yes
      restartPolicy: OnFailure
  ttlSecondsAfterFinished: 30  # Deletes the job and pods 30 seconds after completion
